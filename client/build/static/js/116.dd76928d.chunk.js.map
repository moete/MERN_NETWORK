{"version":3,"sources":["../node_modules/react-google-maps/lib/components/addons/InfoBox.js","../node_modules/google-maps-infobox/infobox-module.js"],"names":["Object","defineProperty","exports","value","InfoBox","undefined","_InfoBox$contextTypes","_defineProperty3","_interopRequireDefault","__webpack_require__","_getPrototypeOf2","_classCallCheck3","_createClass3","_possibleConstructorReturn3","_inherits3","_canUseDom2","_invariant2","_react2","_reactDom2","_propTypes2","_MapChildHelper","_constants","obj","__esModule","default","_React$PureComponent","_ref","_temp","_this","_ret","this","_len","arguments","length","args","Array","_key","__proto__","call","apply","concat","state","INFO_BOX","key","infoBox","GoogleMapsInfobox","construct","propTypes","updaterMap","props","setMap","context","MAP","setState","componentDidMount","eventMap","content","document","createElement","unstable_renderSubtreeIntoContainer","Children","only","children","setContent","open","ANCHOR","prevProps","componentDidUpdate","getContent","componentWillUnmount","unmountComponentAtNode","getPosition","getVisible","getZIndex","PureComponent","defaultOptions","any","defaultPosition","defaultVisible","bool","defaultZIndex","number","options","position","visible","zIndex","onCloseClick","func","onDomReady","onContentChanged","onPositionChanged","onZindexChanged","contextTypes","object","anchor","getMap","instance","_options","setOptions","_position","setPosition","_visible","setVisible","_zIndex","setZIndex","opt_opts","google","maps","OverlayView","content_","disableAutoPan_","disableAutoPan","maxWidth_","maxWidth","pixelOffset_","pixelOffset","Size","position_","LatLng","zIndex_","boxClass_","boxClass","boxStyle_","boxStyle","closeBoxMargin_","closeBoxMargin","closeBoxURL_","closeBoxURL","infoBoxClearance_","infoBoxClearance","isHidden","isHidden_","alignBottom_","alignBottom","pane_","pane","enableEventPropagation_","enableEventPropagation","div_","closeListener_","moveListener_","mapListener_","contextListener_","eventListeners_","fixedWidthSet_","prototype","createInfoBoxDiv_","i","events","bw","me","cancelHandler","e","cancelBubble","stopPropagation","setBoxStyle_","nodeType","innerHTML","getCloseBoxImg_","appendChild","getPanes","addClickHandler_","style","width","offsetWidth","getBoxWidths_","left","right","panBox_","push","event","addDomListener","cursor","returnValue","preventDefault","trigger","img","closeBox","firstChild","getCloseClickHandler_","close","disablePan","map","xOffset","yOffset","Map","getBounds","contains","setCenter","mapDiv","getDiv","mapWidth","mapHeight","offsetHeight","iwOffsetX","iwOffsetY","height","iwWidth","iwHeight","padX","padY","pixPosition","getProjection","fromLatLngToContainerPixel","x","y","getCenter","panBy","className","cssText","hasOwnProperty","WebkitTransform","opacity","MsFilter","filter","visibility","overflow","computedStyle","top","bottom","box","defaultView","getComputedStyle","ownerDocument","parseInt","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","documentElement","currentStyle","onRemove","parentNode","removeChild","draw","fromLatLngToDivPixel","removeListener","latlng","index","isVisible","show","hide","addListener","module"],"mappings":"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","file":"static/js/116.dd76928d.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InfoBox = undefined;\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _InfoBox$contextTypes;\n\nvar _canUseDom = require(\"can-use-dom\");\n\nvar _canUseDom2 = _interopRequireDefault(_canUseDom);\n\nvar _invariant = require(\"invariant\");\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _MapChildHelper = require(\"../../utils/MapChildHelper\");\n\nvar _constants = require(\"../../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * A wrapper around `InfoBox`\n *\n * @see http://htmlpreview.github.io/?https://github.com/googlemaps/v3-utility-library/blob/master/infobox/docs/reference.html\n */\n\n\nvar InfoBox = exports.InfoBox = function (_React$PureComponent) {\n  ;\n  (0, _inherits3.default)(InfoBox, _React$PureComponent);\n\n  function InfoBox() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, InfoBox);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = InfoBox.__proto__ || (0, _getPrototypeOf2.default)(InfoBox)).call.apply(_ref, [this].concat(args))), _this), _this.state = (0, _defineProperty3.default)({}, _constants.INFO_BOX, null), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  ;\n  (0, _createClass3.default)(InfoBox, [{\n    key: \"componentWillMount\",\n\n    /*\n    * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoBox\n    */\n    value: function componentWillMount() {\n      if (!_canUseDom2.default || this.state[_constants.INFO_BOX]) {\n        return;\n      }\n\n      var _require = require(\n      /* \"google-maps-infobox\" uses \"google\" as a global variable. Since we don't\n      * have \"google\" on the server, we can not use it in server-side rendering.\n      * As a result, we import \"google-maps-infobox\" here to prevent an error on\n      * a isomorphic server.\n      */\n      \"google-maps-infobox\"),\n          GoogleMapsInfobox = _require.InfoBox;\n\n      var infoBox = new GoogleMapsInfobox();\n      (0, _MapChildHelper.construct)(InfoBox.propTypes, updaterMap, this.props, infoBox);\n      infoBox.setMap(this.context[_constants.MAP]);\n      this.setState((0, _defineProperty3.default)({}, _constants.INFO_BOX, infoBox));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ;\n      (0, _MapChildHelper.componentDidMount)(this, this.state[_constants.INFO_BOX], eventMap);\n      var content = document.createElement(\"div\");\n\n      _reactDom2.default.unstable_renderSubtreeIntoContainer(this, _react2.default.Children.only(this.props.children), content);\n\n      this.state[_constants.INFO_BOX].setContent(content);\n\n      open(this.state[_constants.INFO_BOX], this.context[_constants.ANCHOR]);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      ;\n      (0, _MapChildHelper.componentDidUpdate)(this, this.state[_constants.INFO_BOX], eventMap, updaterMap, prevProps);\n\n      if (this.props.children !== prevProps.children) {\n        _reactDom2.default.unstable_renderSubtreeIntoContainer(this, _react2.default.Children.only(this.props.children), this.state[_constants.INFO_BOX].getContent());\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ;\n      (0, _MapChildHelper.componentWillUnmount)(this);\n      var infoBox = this.state[_constants.INFO_BOX];\n\n      if (infoBox) {\n        if (infoBox.getContent()) {\n          _reactDom2.default.unmountComponentAtNode(infoBox.getContent());\n        }\n\n        infoBox.setMap(null);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return false;\n    }\n    /**\n     *\n     * @type LatLng\n     */\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this.state[_constants.INFO_BOX].getPosition();\n    }\n    /**\n     *\n     * @type boolean\n     */\n\n  }, {\n    key: \"getVisible\",\n    value: function getVisible() {\n      return this.state[_constants.INFO_BOX].getVisible();\n    }\n    /**\n     *\n     * @type number\n     */\n\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex() {\n      return this.state[_constants.INFO_BOX].getZIndex();\n    }\n  }]);\n  return InfoBox;\n}(_react2.default.PureComponent);\n\nInfoBox.propTypes = {\n  /**\n   * @type InfoBoxOptions\n   */\n  defaultOptions: _propTypes2.default.any,\n\n  /**\n   * @type LatLng|LatLngLiteral\n   */\n  defaultPosition: _propTypes2.default.any,\n\n  /**\n   * @type boolean\n   */\n  defaultVisible: _propTypes2.default.bool,\n\n  /**\n   * @type number\n   */\n  defaultZIndex: _propTypes2.default.number,\n\n  /**\n   * @type InfoBoxOptions\n   */\n  options: _propTypes2.default.any,\n\n  /**\n   * @type LatLng|LatLngLiteral\n   */\n  position: _propTypes2.default.any,\n\n  /**\n   * @type boolean\n   */\n  visible: _propTypes2.default.bool,\n\n  /**\n   * @type number\n   */\n  zIndex: _propTypes2.default.number,\n\n  /**\n   * function\n   */\n  onCloseClick: _propTypes2.default.func,\n\n  /**\n   * function\n   */\n  onDomReady: _propTypes2.default.func,\n\n  /**\n   * function\n   */\n  onContentChanged: _propTypes2.default.func,\n\n  /**\n   * function\n   */\n  onPositionChanged: _propTypes2.default.func,\n\n  /**\n   * function\n   */\n  onZindexChanged: _propTypes2.default.func\n};\nInfoBox.contextTypes = (_InfoBox$contextTypes = {}, (0, _defineProperty3.default)(_InfoBox$contextTypes, _constants.MAP, _propTypes2.default.object), (0, _defineProperty3.default)(_InfoBox$contextTypes, _constants.ANCHOR, _propTypes2.default.object), _InfoBox$contextTypes);\nexports.default = InfoBox;\n\nvar open = function open(infoBox, anchor) {\n  if (anchor) {\n    infoBox.open(infoBox.getMap(), anchor);\n  } else if (infoBox.getPosition()) {\n    infoBox.open(infoBox.getMap());\n  } else {\n    ;\n    (0, _invariant2.default)(false, \"You must provide either an anchor (typically render it inside a <Marker>) or a position props for <InfoBox>.\");\n  }\n};\n\nvar eventMap = {\n  onCloseClick: \"closeclick\",\n  onDomReady: \"domready\",\n  onContentChanged: \"content_changed\",\n  onPositionChanged: \"position_changed\",\n  onZindexChanged: \"zindex_changed\"\n};\nvar updaterMap = {\n  options: function options(instance, _options) {\n    instance.setOptions(_options);\n  },\n  position: function position(instance, _position) {\n    instance.setPosition(_position);\n  },\n  visible: function visible(instance, _visible) {\n    instance.setVisible(_visible);\n  },\n  zIndex: function zIndex(instance, _zIndex) {\n    instance.setZIndex(_zIndex);\n  }\n};","/**\n * @name InfoBox\n * @version 1.1.13 [March 19, 2014]\n * @author Gary Little (inspired by proof-of-concept code from Pamela Fox of Google)\n * @copyright Copyright 2010 Gary Little [gary at luxcentral.com]\n * @fileoverview InfoBox extends the Google Maps JavaScript API V3 <tt>OverlayView</tt> class.\n *  <p>\n *  An InfoBox behaves like a <tt>google.maps.InfoWindow</tt>, but it supports several\n *  additional properties for advanced styling. An InfoBox can also be used as a map label.\n *  <p>\n *  An InfoBox also fires the same events as a <tt>google.maps.InfoWindow</tt>.\n */\n\n/*!\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browser:true */\n\n/*global google */\n\n/**\n * @name InfoBoxOptions\n * @class This class represents the optional parameter passed to the {@link InfoBox} constructor.\n * @property {string|Node} content The content of the InfoBox (plain text or an HTML DOM node).\n * @property {boolean} [disableAutoPan=false] Disable auto-pan on <tt>open</tt>.\n * @property {number} maxWidth The maximum width (in pixels) of the InfoBox. Set to 0 if no maximum.\n * @property {Size} pixelOffset The offset (in pixels) from the top left corner of the InfoBox\n *  (or the bottom left corner if the <code>alignBottom</code> property is <code>true</code>)\n *  to the map pixel corresponding to <tt>position</tt>.\n * @property {LatLng} position The geographic location at which to display the InfoBox.\n * @property {number} zIndex The CSS z-index style value for the InfoBox.\n *  Note: This value overrides a zIndex setting specified in the <tt>boxStyle</tt> property.\n * @property {string} [boxClass=\"infoBox\"] The name of the CSS class defining the styles for the InfoBox container.\n * @property {Object} [boxStyle] An object literal whose properties define specific CSS\n *  style values to be applied to the InfoBox. Style values defined here override those that may\n *  be defined in the <code>boxClass</code> style sheet. If this property is changed after the\n *  InfoBox has been created, all previously set styles (except those defined in the style sheet)\n *  are removed from the InfoBox before the new style values are applied.\n * @property {string} closeBoxMargin The CSS margin style value for the close box.\n *  The default is \"2px\" (a 2-pixel margin on all sides).\n * @property {string} closeBoxURL The URL of the image representing the close box.\n *  Note: The default is the URL for Google's standard close box.\n *  Set this property to \"\" if no close box is required.\n * @property {Size} infoBoxClearance Minimum offset (in pixels) from the InfoBox to the\n *  map edge after an auto-pan.\n * @property {boolean} [isHidden=false] Hide the InfoBox on <tt>open</tt>.\n *  [Deprecated in favor of the <tt>visible</tt> property.]\n * @property {boolean} [visible=true] Show the InfoBox on <tt>open</tt>.\n * @property {boolean} alignBottom Align the bottom left corner of the InfoBox to the <code>position</code>\n *  location (default is <tt>false</tt> which means that the top left corner of the InfoBox is aligned).\n * @property {string} pane The pane where the InfoBox is to appear (default is \"floatPane\").\n *  Set the pane to \"mapPane\" if the InfoBox is being used as a map label.\n *  Valid pane names are the property names for the <tt>google.maps.MapPanes</tt> object.\n * @property {boolean} enableEventPropagation Propagate mousedown, mousemove, mouseover, mouseout,\n *  mouseup, click, dblclick, touchstart, touchend, touchmove, and contextmenu events in the InfoBox\n *  (default is <tt>false</tt> to mimic the behavior of a <tt>google.maps.InfoWindow</tt>). Set\n *  this property to <tt>true</tt> if the InfoBox is being used as a map label.\n */\n\n/**\n * Creates an InfoBox with the options specified in {@link InfoBoxOptions}.\n *  Call <tt>InfoBox.open</tt> to add the box to the map.\n * @constructor\n * @param {InfoBoxOptions} [opt_opts]\n */\nfunction InfoBox(opt_opts) {\n  opt_opts = opt_opts || {};\n  google.maps.OverlayView.apply(this, arguments); // Standard options (in common with google.maps.InfoWindow):\n  //\n\n  this.content_ = opt_opts.content || \"\";\n  this.disableAutoPan_ = opt_opts.disableAutoPan || false;\n  this.maxWidth_ = opt_opts.maxWidth || 0;\n  this.pixelOffset_ = opt_opts.pixelOffset || new google.maps.Size(0, 0);\n  this.position_ = opt_opts.position || new google.maps.LatLng(0, 0);\n  this.zIndex_ = opt_opts.zIndex || null; // Additional options (unique to InfoBox):\n  //\n\n  this.boxClass_ = opt_opts.boxClass || \"infoBox\";\n  this.boxStyle_ = opt_opts.boxStyle || {};\n  this.closeBoxMargin_ = opt_opts.closeBoxMargin || \"2px\";\n  this.closeBoxURL_ = opt_opts.closeBoxURL || \"http://www.google.com/intl/en_us/mapfiles/close.gif\";\n\n  if (opt_opts.closeBoxURL === \"\") {\n    this.closeBoxURL_ = \"\";\n  }\n\n  this.infoBoxClearance_ = opt_opts.infoBoxClearance || new google.maps.Size(1, 1);\n\n  if (typeof opt_opts.visible === \"undefined\") {\n    if (typeof opt_opts.isHidden === \"undefined\") {\n      opt_opts.visible = true;\n    } else {\n      opt_opts.visible = !opt_opts.isHidden;\n    }\n  }\n\n  this.isHidden_ = !opt_opts.visible;\n  this.alignBottom_ = opt_opts.alignBottom || false;\n  this.pane_ = opt_opts.pane || \"floatPane\";\n  this.enableEventPropagation_ = opt_opts.enableEventPropagation || false;\n  this.div_ = null;\n  this.closeListener_ = null;\n  this.moveListener_ = null;\n  this.mapListener_ = null;\n  this.contextListener_ = null;\n  this.eventListeners_ = null;\n  this.fixedWidthSet_ = null;\n}\n/* InfoBox extends OverlayView in the Google Maps API v3.\n */\n\n\nInfoBox.prototype = new google.maps.OverlayView();\n/**\n * Creates the DIV representing the InfoBox.\n * @private\n */\n\nInfoBox.prototype.createInfoBoxDiv_ = function () {\n  var i;\n  var events;\n  var bw;\n  var me = this; // This handler prevents an event in the InfoBox from being passed on to the map.\n  //\n\n  var cancelHandler = function cancelHandler(e) {\n    e.cancelBubble = true;\n\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n  }; // This handler ignores the current event in the InfoBox and conditionally prevents\n  // the event from being passed on to the map. It is used for the contextmenu event.\n  //\n\n\n  var ignoreHandler = function ignoreHandler(e) {\n    e.returnValue = false;\n\n    if (e.preventDefault) {\n      e.preventDefault();\n    }\n\n    if (!me.enableEventPropagation_) {\n      cancelHandler(e);\n    }\n  };\n\n  if (!this.div_) {\n    this.div_ = document.createElement(\"div\");\n    this.setBoxStyle_();\n\n    if (typeof this.content_.nodeType === \"undefined\") {\n      this.div_.innerHTML = this.getCloseBoxImg_() + this.content_;\n    } else {\n      this.div_.innerHTML = this.getCloseBoxImg_();\n      this.div_.appendChild(this.content_);\n    } // Add the InfoBox DIV to the DOM\n\n\n    this.getPanes()[this.pane_].appendChild(this.div_);\n    this.addClickHandler_();\n\n    if (this.div_.style.width) {\n      this.fixedWidthSet_ = true;\n    } else {\n      if (this.maxWidth_ !== 0 && this.div_.offsetWidth > this.maxWidth_) {\n        this.div_.style.width = this.maxWidth_;\n        this.fixedWidthSet_ = true;\n      } else {\n        // The following code is needed to overcome problems with MSIE\n        bw = this.getBoxWidths_();\n        this.div_.style.width = this.div_.offsetWidth - bw.left - bw.right + \"px\";\n        this.fixedWidthSet_ = false;\n      }\n    }\n\n    this.panBox_(this.disableAutoPan_);\n\n    if (!this.enableEventPropagation_) {\n      this.eventListeners_ = []; // Cancel event propagation.\n      //\n      // Note: mousemove not included (to resolve Issue 152)\n\n      events = [\"mousedown\", \"mouseover\", \"mouseout\", \"mouseup\", \"click\", \"dblclick\", \"touchstart\", \"touchend\", \"touchmove\"];\n\n      for (i = 0; i < events.length; i++) {\n        this.eventListeners_.push(google.maps.event.addDomListener(this.div_, events[i], cancelHandler));\n      } // Workaround for Google bug that causes the cursor to change to a pointer\n      // when the mouse moves over a marker underneath InfoBox.\n\n\n      this.eventListeners_.push(google.maps.event.addDomListener(this.div_, \"mouseover\", function (e) {\n        this.style.cursor = \"default\";\n      }));\n    }\n\n    this.contextListener_ = google.maps.event.addDomListener(this.div_, \"contextmenu\", ignoreHandler);\n    /**\n     * This event is fired when the DIV containing the InfoBox's content is attached to the DOM.\n     * @name InfoBox#domready\n     * @event\n     */\n\n    google.maps.event.trigger(this, \"domready\");\n  }\n};\n/**\n * Returns the HTML <IMG> tag for the close box.\n * @private\n */\n\n\nInfoBox.prototype.getCloseBoxImg_ = function () {\n  var img = \"\";\n\n  if (this.closeBoxURL_ !== \"\") {\n    img = \"<img\";\n    img += \" src='\" + this.closeBoxURL_ + \"'\";\n    img += \" align=right\"; // Do this because Opera chokes on style='float: right;'\n\n    img += \" style='\";\n    img += \" position: relative;\"; // Required by MSIE\n\n    img += \" cursor: pointer;\";\n    img += \" margin: \" + this.closeBoxMargin_ + \";\";\n    img += \"'>\";\n  }\n\n  return img;\n};\n/**\n * Adds the click handler to the InfoBox close box.\n * @private\n */\n\n\nInfoBox.prototype.addClickHandler_ = function () {\n  var closeBox;\n\n  if (this.closeBoxURL_ !== \"\") {\n    closeBox = this.div_.firstChild;\n    this.closeListener_ = google.maps.event.addDomListener(closeBox, \"click\", this.getCloseClickHandler_());\n  } else {\n    this.closeListener_ = null;\n  }\n};\n/**\n * Returns the function to call when the user clicks the close box of an InfoBox.\n * @private\n */\n\n\nInfoBox.prototype.getCloseClickHandler_ = function () {\n  var me = this;\n  return function (e) {\n    // 1.0.3 fix: Always prevent propagation of a close box click to the map:\n    e.cancelBubble = true;\n\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n    /**\n     * This event is fired when the InfoBox's close box is clicked.\n     * @name InfoBox#closeclick\n     * @event\n     */\n\n\n    google.maps.event.trigger(me, \"closeclick\");\n    me.close();\n  };\n};\n/**\n * Pans the map so that the InfoBox appears entirely within the map's visible area.\n * @private\n */\n\n\nInfoBox.prototype.panBox_ = function (disablePan) {\n  var map;\n  var bounds;\n  var xOffset = 0,\n      yOffset = 0;\n\n  if (!disablePan) {\n    map = this.getMap();\n\n    if (map instanceof google.maps.Map) {\n      // Only pan if attached to map, not panorama\n      if (!map.getBounds().contains(this.position_)) {\n        // Marker not in visible area of map, so set center\n        // of map to the marker position first.\n        map.setCenter(this.position_);\n      }\n\n      bounds = map.getBounds();\n      var mapDiv = map.getDiv();\n      var mapWidth = mapDiv.offsetWidth;\n      var mapHeight = mapDiv.offsetHeight;\n      var iwOffsetX = this.pixelOffset_.width;\n      var iwOffsetY = this.pixelOffset_.height;\n      var iwWidth = this.div_.offsetWidth;\n      var iwHeight = this.div_.offsetHeight;\n      var padX = this.infoBoxClearance_.width;\n      var padY = this.infoBoxClearance_.height;\n      var pixPosition = this.getProjection().fromLatLngToContainerPixel(this.position_);\n\n      if (pixPosition.x < -iwOffsetX + padX) {\n        xOffset = pixPosition.x + iwOffsetX - padX;\n      } else if (pixPosition.x + iwWidth + iwOffsetX + padX > mapWidth) {\n        xOffset = pixPosition.x + iwWidth + iwOffsetX + padX - mapWidth;\n      }\n\n      if (this.alignBottom_) {\n        if (pixPosition.y < -iwOffsetY + padY + iwHeight) {\n          yOffset = pixPosition.y + iwOffsetY - padY - iwHeight;\n        } else if (pixPosition.y + iwOffsetY + padY > mapHeight) {\n          yOffset = pixPosition.y + iwOffsetY + padY - mapHeight;\n        }\n      } else {\n        if (pixPosition.y < -iwOffsetY + padY) {\n          yOffset = pixPosition.y + iwOffsetY - padY;\n        } else if (pixPosition.y + iwHeight + iwOffsetY + padY > mapHeight) {\n          yOffset = pixPosition.y + iwHeight + iwOffsetY + padY - mapHeight;\n        }\n      }\n\n      if (!(xOffset === 0 && yOffset === 0)) {\n        // Move the map to the shifted center.\n        //\n        var c = map.getCenter();\n        map.panBy(xOffset, yOffset);\n      }\n    }\n  }\n};\n/**\n * Sets the style of the InfoBox by setting the style sheet and applying\n * other specific styles requested.\n * @private\n */\n\n\nInfoBox.prototype.setBoxStyle_ = function () {\n  var i, boxStyle;\n\n  if (this.div_) {\n    // Apply style values from the style sheet defined in the boxClass parameter:\n    this.div_.className = this.boxClass_; // Clear existing inline style values:\n\n    this.div_.style.cssText = \"\"; // Apply style values defined in the boxStyle parameter:\n\n    boxStyle = this.boxStyle_;\n\n    for (i in boxStyle) {\n      if (boxStyle.hasOwnProperty(i)) {\n        this.div_.style[i] = boxStyle[i];\n      }\n    } // Fix for iOS disappearing InfoBox problem.\n    // See http://stackoverflow.com/questions/9229535/google-maps-markers-disappear-at-certain-zoom-level-only-on-iphone-ipad\n\n\n    this.div_.style.WebkitTransform = \"translateZ(0)\"; // Fix up opacity style for benefit of MSIE:\n    //\n\n    if (typeof this.div_.style.opacity !== \"undefined\" && this.div_.style.opacity !== \"\") {\n      // See http://www.quirksmode.org/css/opacity.html\n      this.div_.style.MsFilter = \"\\\"progid:DXImageTransform.Microsoft.Alpha(Opacity=\" + this.div_.style.opacity * 100 + \")\\\"\";\n      this.div_.style.filter = \"alpha(opacity=\" + this.div_.style.opacity * 100 + \")\";\n    } // Apply required styles:\n    //\n\n\n    this.div_.style.position = \"absolute\";\n    this.div_.style.visibility = 'hidden';\n\n    if (this.zIndex_ !== null) {\n      this.div_.style.zIndex = this.zIndex_;\n    }\n\n    if (!this.div_.style.overflow) {\n      this.div_.style.overflow = \"auto\";\n    }\n  }\n};\n/**\n * Get the widths of the borders of the InfoBox.\n * @private\n * @return {Object} widths object (top, bottom left, right)\n */\n\n\nInfoBox.prototype.getBoxWidths_ = function () {\n  var computedStyle;\n  var bw = {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  };\n  var box = this.div_;\n\n  if (document.defaultView && document.defaultView.getComputedStyle) {\n    computedStyle = box.ownerDocument.defaultView.getComputedStyle(box, \"\");\n\n    if (computedStyle) {\n      // The computed styles are always in pixel units (good!)\n      bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;\n      bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n      bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n      bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;\n    }\n  } else if (document.documentElement.currentStyle) {\n    // MSIE\n    if (box.currentStyle) {\n      // The current styles may not be in pixel units, but assume they are (bad!)\n      bw.top = parseInt(box.currentStyle.borderTopWidth, 10) || 0;\n      bw.bottom = parseInt(box.currentStyle.borderBottomWidth, 10) || 0;\n      bw.left = parseInt(box.currentStyle.borderLeftWidth, 10) || 0;\n      bw.right = parseInt(box.currentStyle.borderRightWidth, 10) || 0;\n    }\n  }\n\n  return bw;\n};\n/**\n * Invoked when <tt>close</tt> is called. Do not call it directly.\n */\n\n\nInfoBox.prototype.onRemove = function () {\n  if (this.div_) {\n    this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  }\n};\n/**\n * Draws the InfoBox based on the current map projection and zoom level.\n */\n\n\nInfoBox.prototype.draw = function () {\n  this.createInfoBoxDiv_();\n  var pixPosition = this.getProjection().fromLatLngToDivPixel(this.position_);\n  this.div_.style.left = pixPosition.x + this.pixelOffset_.width + \"px\";\n\n  if (this.alignBottom_) {\n    this.div_.style.bottom = -(pixPosition.y + this.pixelOffset_.height) + \"px\";\n  } else {\n    this.div_.style.top = pixPosition.y + this.pixelOffset_.height + \"px\";\n  }\n\n  if (this.isHidden_) {\n    this.div_.style.visibility = \"hidden\";\n  } else {\n    this.div_.style.visibility = \"visible\";\n  }\n};\n/**\n * Sets the options for the InfoBox. Note that changes to the <tt>maxWidth</tt>,\n *  <tt>closeBoxMargin</tt>, <tt>closeBoxURL</tt>, and <tt>enableEventPropagation</tt>\n *  properties have no affect until the current InfoBox is <tt>close</tt>d and a new one\n *  is <tt>open</tt>ed.\n * @param {InfoBoxOptions} opt_opts\n */\n\n\nInfoBox.prototype.setOptions = function (opt_opts) {\n  if (typeof opt_opts.boxClass !== \"undefined\") {\n    // Must be first\n    this.boxClass_ = opt_opts.boxClass;\n    this.setBoxStyle_();\n  }\n\n  if (typeof opt_opts.boxStyle !== \"undefined\") {\n    // Must be second\n    this.boxStyle_ = opt_opts.boxStyle;\n    this.setBoxStyle_();\n  }\n\n  if (typeof opt_opts.content !== \"undefined\") {\n    this.setContent(opt_opts.content);\n  }\n\n  if (typeof opt_opts.disableAutoPan !== \"undefined\") {\n    this.disableAutoPan_ = opt_opts.disableAutoPan;\n  }\n\n  if (typeof opt_opts.maxWidth !== \"undefined\") {\n    this.maxWidth_ = opt_opts.maxWidth;\n  }\n\n  if (typeof opt_opts.pixelOffset !== \"undefined\") {\n    this.pixelOffset_ = opt_opts.pixelOffset;\n  }\n\n  if (typeof opt_opts.alignBottom !== \"undefined\") {\n    this.alignBottom_ = opt_opts.alignBottom;\n  }\n\n  if (typeof opt_opts.position !== \"undefined\") {\n    this.setPosition(opt_opts.position);\n  }\n\n  if (typeof opt_opts.zIndex !== \"undefined\") {\n    this.setZIndex(opt_opts.zIndex);\n  }\n\n  if (typeof opt_opts.closeBoxMargin !== \"undefined\") {\n    this.closeBoxMargin_ = opt_opts.closeBoxMargin;\n  }\n\n  if (typeof opt_opts.closeBoxURL !== \"undefined\") {\n    this.closeBoxURL_ = opt_opts.closeBoxURL;\n  }\n\n  if (typeof opt_opts.infoBoxClearance !== \"undefined\") {\n    this.infoBoxClearance_ = opt_opts.infoBoxClearance;\n  }\n\n  if (typeof opt_opts.isHidden !== \"undefined\") {\n    this.isHidden_ = opt_opts.isHidden;\n  }\n\n  if (typeof opt_opts.visible !== \"undefined\") {\n    this.isHidden_ = !opt_opts.visible;\n  }\n\n  if (typeof opt_opts.enableEventPropagation !== \"undefined\") {\n    this.enableEventPropagation_ = opt_opts.enableEventPropagation;\n  }\n\n  if (this.div_) {\n    this.draw();\n  }\n};\n/**\n * Sets the content of the InfoBox.\n *  The content can be plain text or an HTML DOM node.\n * @param {string|Node} content\n */\n\n\nInfoBox.prototype.setContent = function (content) {\n  this.content_ = content;\n\n  if (this.div_) {\n    if (this.closeListener_) {\n      google.maps.event.removeListener(this.closeListener_);\n      this.closeListener_ = null;\n    } // Odd code required to make things work with MSIE.\n    //\n\n\n    if (!this.fixedWidthSet_) {\n      this.div_.style.width = \"\";\n    }\n\n    if (typeof content.nodeType === \"undefined\") {\n      this.div_.innerHTML = this.getCloseBoxImg_() + content;\n    } else {\n      this.div_.innerHTML = this.getCloseBoxImg_();\n      this.div_.appendChild(content);\n    } // Perverse code required to make things work with MSIE.\n    // (Ensures the close box does, in fact, float to the right.)\n    //\n\n\n    if (!this.fixedWidthSet_) {\n      this.div_.style.width = this.div_.offsetWidth + \"px\";\n\n      if (typeof content.nodeType === \"undefined\") {\n        this.div_.innerHTML = this.getCloseBoxImg_() + content;\n      } else {\n        this.div_.innerHTML = this.getCloseBoxImg_();\n        this.div_.appendChild(content);\n      }\n    }\n\n    this.addClickHandler_();\n  }\n  /**\n   * This event is fired when the content of the InfoBox changes.\n   * @name InfoBox#content_changed\n   * @event\n   */\n\n\n  google.maps.event.trigger(this, \"content_changed\");\n};\n/**\n * Sets the geographic location of the InfoBox.\n * @param {LatLng} latlng\n */\n\n\nInfoBox.prototype.setPosition = function (latlng) {\n  this.position_ = latlng;\n\n  if (this.div_) {\n    this.draw();\n  }\n  /**\n   * This event is fired when the position of the InfoBox changes.\n   * @name InfoBox#position_changed\n   * @event\n   */\n\n\n  google.maps.event.trigger(this, \"position_changed\");\n};\n/**\n * Sets the zIndex style for the InfoBox.\n * @param {number} index\n */\n\n\nInfoBox.prototype.setZIndex = function (index) {\n  this.zIndex_ = index;\n\n  if (this.div_) {\n    this.div_.style.zIndex = index;\n  }\n  /**\n   * This event is fired when the zIndex of the InfoBox changes.\n   * @name InfoBox#zindex_changed\n   * @event\n   */\n\n\n  google.maps.event.trigger(this, \"zindex_changed\");\n};\n/**\n * Sets the visibility of the InfoBox.\n * @param {boolean} isVisible\n */\n\n\nInfoBox.prototype.setVisible = function (isVisible) {\n  this.isHidden_ = !isVisible;\n\n  if (this.div_) {\n    this.div_.style.visibility = this.isHidden_ ? \"hidden\" : \"visible\";\n  }\n};\n/**\n * Returns the content of the InfoBox.\n * @returns {string | Node}\n */\n\n\nInfoBox.prototype.getContent = function () {\n  return this.content_;\n};\n/**\n * Returns the geographic location of the InfoBox.\n * @returns {LatLng}\n */\n\n\nInfoBox.prototype.getPosition = function () {\n  return this.position_;\n};\n/**\n * Returns the zIndex for the InfoBox.\n * @returns {number}\n */\n\n\nInfoBox.prototype.getZIndex = function () {\n  return this.zIndex_;\n};\n/**\n * Returns a flag indicating whether the InfoBox is visible.\n * @returns {boolean}\n */\n\n\nInfoBox.prototype.getVisible = function () {\n  var isVisible;\n\n  if (typeof this.getMap() === \"undefined\" || this.getMap() === null) {\n    isVisible = false;\n  } else {\n    isVisible = !this.isHidden_;\n  }\n\n  return isVisible;\n};\n/**\n * Shows the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]\n */\n\n\nInfoBox.prototype.show = function () {\n  this.isHidden_ = false;\n\n  if (this.div_) {\n    this.div_.style.visibility = \"visible\";\n  }\n};\n/**\n * Hides the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]\n */\n\n\nInfoBox.prototype.hide = function () {\n  this.isHidden_ = true;\n\n  if (this.div_) {\n    this.div_.style.visibility = \"hidden\";\n  }\n};\n/**\n * Adds the InfoBox to the specified map or Street View panorama. If <tt>anchor</tt>\n *  (usually a <tt>google.maps.Marker</tt>) is specified, the position\n *  of the InfoBox is set to the position of the <tt>anchor</tt>. If the\n *  anchor is dragged to a new location, the InfoBox moves as well.\n * @param {Map|StreetViewPanorama} map\n * @param {MVCObject} [anchor]\n */\n\n\nInfoBox.prototype.open = function (map, anchor) {\n  var me = this;\n\n  if (anchor) {\n    this.position_ = anchor.getPosition();\n    this.moveListener_ = google.maps.event.addListener(anchor, \"position_changed\", function () {\n      me.setPosition(this.getPosition());\n    });\n    this.mapListener_ = google.maps.event.addListener(anchor, \"map_changed\", function () {\n      me.setMap(this.map);\n    });\n  }\n\n  this.setMap(map);\n\n  if (this.div_) {\n    this.panBox_();\n  }\n};\n/**\n * Removes the InfoBox from the map.\n */\n\n\nInfoBox.prototype.close = function () {\n  var i;\n\n  if (this.closeListener_) {\n    google.maps.event.removeListener(this.closeListener_);\n    this.closeListener_ = null;\n  }\n\n  if (this.eventListeners_) {\n    for (i = 0; i < this.eventListeners_.length; i++) {\n      google.maps.event.removeListener(this.eventListeners_[i]);\n    }\n\n    this.eventListeners_ = null;\n  }\n\n  if (this.moveListener_) {\n    google.maps.event.removeListener(this.moveListener_);\n    this.moveListener_ = null;\n  }\n\n  if (this.mapListener_) {\n    google.maps.event.removeListener(this.mapListener_);\n    this.mapListener_ = null;\n  }\n\n  if (this.contextListener_) {\n    google.maps.event.removeListener(this.contextListener_);\n    this.contextListener_ = null;\n  }\n\n  this.setMap(null);\n};\n\nmodule.exports = {\n  default: InfoBox,\n  InfoBox: InfoBox\n};"],"sourceRoot":""}