{"version":3,"sources":["routes/extensions/map/googlemap/geoLocation/Components/GeoLocation.js","routes/extensions/map/googlemap/geoLocation/index.js"],"names":["geolocation","canUseDOM","navigator","getCurrentPosition","success","failure","GeolocationExampleGoogleMap","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","center","position","content","radius","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","GeolocationExample","state","isUnmounted","_this2","this","tick","setState","Math","max","raf","lat","coords","latitude","lng","longitude","reason","concat","loadingElement","style","height","containerElement","mapElement","Component","GeoLocation","card","className","title","IntlMessages","id","GeoLocation_GeolocationExample"],"mappings":"wNAKMA,EACJC,KAAaC,UAAUF,YACrBE,UAAUF,YACT,CACCG,mBADD,SACoBC,EAASC,GAC1BA,EAAO,+CAKTC,EAA8BC,wBAAc,SAAAC,GAAK,OACrDC,EAAAC,EAAAC,cAACC,EAAA,UAAD,CACEC,YAAa,GACbC,OAAQN,EAAMM,QAEbN,EAAMM,QACLL,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYG,SAAUP,EAAMM,QAC1BL,EAAAC,EAAAC,cAAA,WAAMH,EAAMQ,UAGfR,EAAMM,QACLL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEE,OAAQN,EAAMM,OACdG,OAAQT,EAAMS,OACdC,QAAS,CACPC,UAAW,MACXC,YAAa,GACbC,YAAa,MACbC,cAAe,EACfC,aAAc,QAYHC,6MAEnBC,MAAQ,CACNX,OAAQ,KACRE,QAAS,KACTC,OAAQ,OAGVS,aAAc,qFAEM,IAAAC,EAAAC,KACZC,EAAO,SAAPA,IACAF,EAAKD,cAGTC,EAAKG,SAAS,CAACb,OAAQc,KAAKC,IAAIL,EAAKF,MAAMR,OAAS,GAAI,KAEpDU,EAAKF,MAAMR,OAAS,KACtBgB,IAAIJ,KAGR7B,EAAYG,mBAAmB,SAACY,GAC1BY,EAAKD,cAGTC,EAAKG,SAAS,CACZhB,OAAQ,CACNoB,IAAKnB,EAASoB,OAAOC,SACrBC,IAAKtB,EAASoB,OAAOG,WAEvBtB,QAAO,gCAGTiB,IAAIJ,KACH,SAACU,GACEZ,EAAKD,aAGTC,EAAKG,SAAS,CACZhB,OAAQ,CACNoB,IAAK,GACLG,IAAK,KAEPrB,QAAO,0CAAAwB,OAA4CD,EAA5C,yDAMXX,KAAKF,aAAc,mCAInB,OACEjB,EAAAC,EAAAC,cAACL,EAAD,CACEmC,eAAgBhC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAACC,OAAM,UACnCC,iBAAkBnC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAACC,OAAM,WACrCE,WAAYpC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAACC,OAAM,UAC/B7B,OAAQc,KAAKH,MAAMX,OACnBE,QAASY,KAAKH,MAAMT,QACpBC,OAAQW,KAAKH,MAAMR,gBA5DqB6B,oBC/BjCC,UARK,WAClB,OACEtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAMC,UAAU,UAAUC,MAAOzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAcC,GAAG,6BAChD3C,EAAAC,EAAAC,cAAC0C,EAAD","file":"static/js/161.4675836a.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Circle, GoogleMap, InfoWindow, withGoogleMap} from \"react-google-maps\";\r\nimport canUseDOM from \"can-use-dom\";\r\nimport raf from \"raf\";\r\n\r\nconst geolocation = (\r\n  canUseDOM && navigator.geolocation ?\r\n    navigator.geolocation :\r\n    ({\r\n      getCurrentPosition(success, failure) {\r\n        failure(`Your browser doesn't support geolocation.`);\r\n      },\r\n    })\r\n);\r\n\r\nconst GeolocationExampleGoogleMap = withGoogleMap(props => (\r\n  <GoogleMap\r\n    defaultZoom={10}\r\n    center={props.center}\r\n  >\r\n    {props.center && (\r\n      <InfoWindow position={props.center}>\r\n        <div>{props.content}</div>\r\n      </InfoWindow>\r\n    )}\r\n    {props.center && (\r\n      <Circle\r\n        center={props.center}\r\n        radius={props.radius}\r\n        options={{\r\n          fillColor: 'red',\r\n          fillOpacity: 0.20,\r\n          strokeColor: 'red',\r\n          strokeOpacity: 1,\r\n          strokeWeight: 1,\r\n        }}\r\n      />\r\n    )}\r\n  </GoogleMap>\r\n));\r\n\r\n/*\r\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\r\n *\r\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\r\n */\r\nexport default class GeolocationExample extends Component {\r\n\r\n  state = {\r\n    center: null,\r\n    content: null,\r\n    radius: 6000,\r\n  };\r\n\r\n  isUnmounted = false;\r\n\r\n  componentDidMount() {\r\n    const tick = () => {\r\n      if (this.isUnmounted) {\r\n        return;\r\n      }\r\n      this.setState({radius: Math.max(this.state.radius - 20, 0)});\r\n\r\n      if (this.state.radius > 200) {\r\n        raf(tick);\r\n      }\r\n    };\r\n    geolocation.getCurrentPosition((position) => {\r\n      if (this.isUnmounted) {\r\n        return;\r\n      }\r\n      this.setState({\r\n        center: {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        },\r\n        content: `Location found using HTML5.`,\r\n      });\r\n\r\n      raf(tick);\r\n    }, (reason) => {\r\n      if (this.isUnmounted) {\r\n        return;\r\n      }\r\n      this.setState({\r\n        center: {\r\n          lat: 60,\r\n          lng: 105,\r\n        },\r\n        content: `Error: The Geolocation service failed (${reason}).`,\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.isUnmounted = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GeolocationExampleGoogleMap\r\n        loadingElement={<div style={{height: `100%`}}/>}\r\n        containerElement={<div style={{height: `550px`}}/>}\r\n        mapElement={<div style={{height: `100%`}}/>}\r\n        center={this.state.center}\r\n        content={this.state.content}\r\n        radius={this.state.radius}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Card} from \"antd\";\r\n\r\nimport GeolocationExample from \"./Components/GeoLocation\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\n\r\n\r\nconst GeoLocation = () => {\r\n  return (\r\n    <Card className=\"gx-card\" title={<IntlMessages id=\"sidebar.map.geoLocation\"/>}>\r\n      <GeolocationExample/>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default GeoLocation;\r\n"],"sourceRoot":""}